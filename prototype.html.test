<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Evan Gans</title>
    <style>
        :root {
            --bg-primary: #0f172a;
            --bg-secondary: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --accent-1: #1a2332;
            --accent-2: #2d1b1f;
            --accent-3: #1a2e1f;
            --accent-4: #2d1b2a;
            --accent-5: #1e2a3a;
            --border-color: #334155;
            --shadow: rgba(0, 0, 0, 0.4);
        }
        
        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            margin: 0;
            padding: 0;
            line-height: 1.6;
            position: relative;
            scroll-behavior: smooth;
        }
        
        .hero-section {
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            background: linear-gradient(135deg, var(--accent-1) 0%, var(--accent-2) 50%, var(--accent-3) 100%);
        }
        
        .hero-content h1 {
            font-size: 3.5rem;
            font-weight: 700;
            margin: 0;
            color: var(--text-primary);
        }
        
        .typing-text {
            display: inline-block;
            position: relative;
        }
        
        .name-trails {
            position: fixed;
            top: 50vh;
            left: 50vw;
            transform: translate(-50%, -50%);
            pointer-events: none;
            z-index: 9999;
            width: 200px;
            height: 200px;
        }
        
        .trail {
            position: absolute;
            opacity: 0;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        
        .trail path {
            fill: none;
            stroke-linecap: round;
            stroke-linejoin: round;
        }
        
        @keyframes trailDraw {
            0% { stroke-dashoffset: 100%; opacity: 1; }
            50% { stroke-dashoffset: 0; opacity: 1; }
            100% { stroke-dashoffset: -100%; opacity: 0; }
        }
        
        .trail.animate path {
            animation: trailDraw 3s ease-in-out forwards;
        }
        
        .cursor {
            display: inline-block;
            width: 2px;
            height: 1em;
            background-color: var(--text-primary);
            margin-left: 2px;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        .content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 80px 20px;
        }
        
        .section-title {
            font-size: 2.5rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 60px;
            color: var(--text-primary);
        }
        
        .projects-grid {
            display: grid;
            gap: 40px;
            margin-bottom: 80px;
        }
        
        .topic-group {
            margin-bottom: 60px;
        }
        
        .topic-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--border-color);
        }
        
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 30px;
        }
        
        .project-card {
            background: var(--bg-secondary);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 4px 20px var(--shadow);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .project-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6, #06d6a0);
        }
        
        .project-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px var(--shadow);
        }
        
        .project-card h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0 0 12px 0;
            color: var(--text-primary);
        }
        
        .project-card p {
            color: var(--text-secondary);
            margin: 0 0 20px 0;
            line-height: 1.5;
        }
        
        .project-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }
        
        .tag {
            background: var(--accent-5);
            color: var(--text-secondary);
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            border: 1px solid var(--border-color);
        }
        
        /* Alternate card backgrounds */
        .project-card:nth-child(5n+1) { background: var(--accent-1); border-color: #475569; }
        .project-card:nth-child(5n+2) { background: var(--accent-2); border-color: #57534e; }
        .project-card:nth-child(5n+3) { background: var(--accent-3); border-color: #4a5568; }
        .project-card:nth-child(5n+4) { background: var(--accent-4); border-color: #553c4e; }
        .project-card:nth-child(5n+5) { background: var(--accent-5); border-color: #4c5563; }
        
        .doodle {
            position: absolute;
            opacity: 0;
            z-index: -1;
            pointer-events: none;
            will-change: transform, opacity;
        }
        .doodle.animate {
            opacity: 0.5;
            transition: opacity 800ms ease-out;
        }
        .doodle path {
            fill: none;
            stroke-linecap: round;
            stroke-linejoin: round;
        }
        .doodle svg {
            overflow: visible;
        }
        @keyframes draw {
            to {
                stroke-dashoffset: 0;
            }
        }
        .doodle.animate path {
            animation: draw 2.2s cubic-bezier(.25,.1,.25,1) forwards;
        }
    /* Doodle positions are dynamic and generated via JS */
    </style>
</head>
<body>
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-content">
            <h1>
                <span class="typing-text" id="typing-text"></span>
                <span class="cursor" id="cursor"></span>
            </h1>
        </div>
    </section>

    <!-- Projects Section -->
    <section class="content">
        <h2 class="section-title">Stuff I've Done</h2>
        
        <div class="projects-grid">
            <!-- Web Development -->
            <div class="topic-group">
                <h3 class="topic-title">Web Development</h3>
                <div class="cards-grid">
                    <div class="project-card">
                        <h3>E-commerce Platform</h3>
                        <p>Built a full-stack e-commerce solution with React, Node.js, and PostgreSQL. Features include user authentication, payment processing, and inventory management.</p>
                        <div class="project-tags">
                            <span class="tag">React</span>
                            <span class="tag">Node.js</span>
                            <span class="tag">PostgreSQL</span>
                            <span class="tag">Stripe</span>
                        </div>
                    </div>
                    <div class="project-card">
                        <h3>Task Management App</h3>
                        <p>Collaborative project management tool with real-time updates, drag-and-drop functionality, and team collaboration features.</p>
                        <div class="project-tags">
                            <span class="tag">Vue.js</span>
                            <span class="tag">Socket.io</span>
                            <span class="tag">MongoDB</span>
                        </div>
                    </div>
                    <div class="project-card">
                        <h3>Portfolio Website</h3>
                        <p>Responsive portfolio site with animated elements, smooth scrolling, and optimized performance. Built with modern web standards.</p>
                        <div class="project-tags">
                            <span class="tag">HTML5</span>
                            <span class="tag">CSS3</span>
                            <span class="tag">JavaScript</span>
                            <span class="tag">GSAP</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Mobile Development -->
            <div class="topic-group">
                <h3 class="topic-title">Mobile Development</h3>
                <div class="cards-grid">
                    <div class="project-card">
                        <h3>Fitness Tracker App</h3>
                        <p>Cross-platform mobile app for tracking workouts, nutrition, and progress. Includes social features and integration with wearable devices.</p>
                        <div class="project-tags">
                            <span class="tag">React Native</span>
                            <span class="tag">Redux</span>
                            <span class="tag">Firebase</span>
                        </div>
                    </div>
                    <div class="project-card">
                        <h3>Recipe Sharing App</h3>
                        <p>Social cooking app where users can share recipes, rate dishes, and create meal plans. Features camera integration and offline support.</p>
                        <div class="project-tags">
                            <span class="tag">Flutter</span>
                            <span class="tag">Dart</span>
                            <span class="tag">SQLite</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Science -->
            <div class="topic-group">
                <h3 class="topic-title">Data Science & AI</h3>
                <div class="cards-grid">
                    <div class="project-card">
                        <h3>Sentiment Analysis Tool</h3>
                        <p>Machine learning model for analyzing social media sentiment with real-time data processing and visualization dashboard.</p>
                        <div class="project-tags">
                            <span class="tag">Python</span>
                            <span class="tag">TensorFlow</span>
                            <span class="tag">Pandas</span>
                            <span class="tag">D3.js</span>
                        </div>
                    </div>
                    <div class="project-card">
                        <h3>Predictive Analytics Dashboard</h3>
                        <p>Business intelligence dashboard with predictive modeling capabilities for sales forecasting and trend analysis.</p>
                        <div class="project-tags">
                            <span class="tag">R</span>
                            <span class="tag">Shiny</span>
                            <span class="tag">ggplot2</span>
                            <span class="tag">MySQL</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Doodles root for dynamic generation -->
    <div id="doodles-root"></div>
    
    <!-- Name trails container at body level -->
    <div class="name-trails" id="name-trails"></div>

    <script>
        // Dark mode pastel colors for doodles
        const COLORS = ['#60a5fa', '#a78bfa', '#34d399', '#f472b6', '#fb7185', '#fbbf24', '#38bdf8', '#a3e635'];

        // Typing animation
        const messages = [
            "Hey there!",
            "I'm Evan"
        ];
        
        let messageIndex = 0;
        let charIndex = 0;
        let isDeleting = false;
        let typingSpeed = 100;
        
        function typeMessage() {
            const currentMessage = messages[messageIndex];
            const typingElement = document.getElementById('typing-text');
            
            if (isDeleting) {
                typingElement.textContent = currentMessage.substring(0, charIndex - 1);
                charIndex--;
                typingSpeed = 50;
            } else {
                typingElement.textContent = currentMessage.substring(0, charIndex + 1);
                charIndex++;
                typingSpeed = 100 + Math.random() * 100;
            }
            
            if (!isDeleting && charIndex === currentMessage.length) {
                if (messageIndex === messages.length - 1) {
                    // On the last message, trigger trails and stop typing
                    document.getElementById('cursor').style.animation = 'blink 1s infinite';
                    setTimeout(triggerNameTrails, 800); // Wait a bit then trigger trails
                    return;
                }
                // Pause before deleting
                setTimeout(() => { isDeleting = true; typeMessage(); }, 2000);
                return;
            }
            
            if (isDeleting && charIndex === 0) {
                isDeleting = false;
                messageIndex++;
                if (messageIndex >= messages.length) {
                    messageIndex = 0;
                }
            }
            
            setTimeout(typeMessage, typingSpeed);
        }

        // Utility: random between a and b
        const rnd = (a, b) => a + Math.random() * (b - a);
        const pick = arr => arr[Math.floor(Math.random() * arr.length)];

        // Generate a short trail path from "Evan"
        function makeTrailPath(length, angle) {
            const segments = Math.floor(length / 8);
            const points = [{x: 0, y: 0}];
            let x = 0, y = 0;
            let currentAngle = angle;
            
            for (let i = 1; i <= segments; i++) {
                // Add some wobble and curve variation
                currentAngle += rnd(-0.3, 0.3);
                const segmentLength = rnd(6, 12);
                x += Math.cos(currentAngle) * segmentLength;
                y += Math.sin(currentAngle) * segmentLength;
                points.push({x, y});
            }
            
            return catmullRomToBezierPath(points);
        }

        // Create a single trail element
        function createTrail(angle, length, delay) {
            const trailColors = ['#60a5fa', '#a78bfa', '#34d399', '#f472b6', '#fbbf24'];
            const color = pick(trailColors);
            
            const div = document.createElement('div');
            div.className = 'trail';
            div.style.animationDelay = `${delay}ms`;
            
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', String(length + 40));
            svg.setAttribute('height', String(length + 40));
            svg.setAttribute('viewBox', `0 0 ${length + 40} ${length + 40}`);
            
            const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            g.setAttribute('transform', `translate(${(length + 40)/2}, ${(length + 40)/2})`);
            
            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', makeTrailPath(length, angle));
            path.setAttribute('stroke', color);
            path.setAttribute('stroke-width', '3');
            path.setAttribute('stroke-dasharray', '100%');
            path.setAttribute('stroke-dashoffset', '100%');
            
            g.appendChild(path);
            svg.appendChild(g);
            div.appendChild(svg);
            
            return div;
        }

        // Trigger trails emanating from "Evan"
        function triggerNameTrails() {
            const container = document.getElementById('name-trails');
            if (!container) return;
            
            // Clear any existing trails
            container.innerHTML = '';
            
            // Create 5-7 trails in different directions
            const numTrails = 5 + Math.floor(Math.random() * 3);
            for (let i = 0; i < numTrails; i++) {
                const angle = (i / numTrails) * Math.PI * 2 + rnd(-0.5, 0.5);
                const length = rnd(60, 120);
                const delay = i * 150; // Stagger the trails
                
                const trail = createTrail(angle, length, delay);
                container.appendChild(trail);
                
                // Trigger animation after a short delay
                setTimeout(() => {
                    trail.classList.add('animate');
                }, delay + 100);
            }
        }

        // Convert Catmull-Rom points to a smooth cubic Bezier path
        function catmullRomToBezierPath(points){
            if (points.length < 2) return '';
            const pts = points.slice();
            // pad ends for proper tangents
            pts.unshift(points[0]);
            pts.push(points[points.length-1]);
            let d = `M ${points[0].x.toFixed(1)} ${points[0].y.toFixed(1)}`;
            for (let i=1; i<pts.length-2; i++){
                const p0 = pts[i-1], p1 = pts[i], p2 = pts[i+1], p3 = pts[i+2];
                const c1x = p1.x + (p2.x - p0.x) / 6;
                const c1y = p1.y + (p2.y - p0.y) / 6;
                const c2x = p2.x - (p3.x - p1.x) / 6;
                const c2y = p2.y - (p3.y - p1.y) / 6;
                d += ` C ${c1x.toFixed(1)} ${c1y.toFixed(1)}, ${c2x.toFixed(1)} ${c2y.toFixed(1)}, ${p2.x.toFixed(1)} ${p2.y.toFixed(1)}`;
            }
            return d;
        }

        // Generate a long, self-crossing route using a smooth random walk
        function makeRoutePath(width, height){
            const marginX = 80;
            const startX = -200; // start offscreen for nicer entry
            const endX = width + 200; // end offscreen
            const midY = height * rnd(0.35, 0.65);
            const step = 22; // pixel step length
            const totalSteps = Math.max(20, Math.floor((endX - startX) / step));
            let x = startX;
            let y = midY;
            let theta = rnd(-0.15, 0.15); // heading
            let k = rnd(-0.02, 0.02);     // curvature
            const points = [{x, y}];

            for (let i=1; i<=totalSteps; i++){
                // occasional loop impulses to create big loopy crossings
                if (Math.random() < 0.08){
                    k += rnd(-0.25, 0.25);
                }
                // gentle wandering
                k += rnd(-0.01, 0.01);
                theta += k;

                // advance with some speed variability
                const dx = Math.cos(theta) * step * rnd(0.9, 1.1);
                const dy = Math.sin(theta) * step * rnd(0.9, 1.1);
                x += dx;
                y += dy;

                // nudge generally rightwards so we traverse the page
                x += 6; // forward bias

                // vertical bounds with soft bounce
                if (y < 10){ y = 10; theta = -theta; }
                if (y > height-10){ y = height-10; theta = -theta; }

                points.push({x, y});
            }

            return catmullRomToBezierPath(points);
        }

        // Create a route doodle spanning the viewport width at vertical y
        function createRoute(y){
            const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            const routeWidth = vw + 400;
            const routeHeight = rnd(120, 220);
            const stroke = pick(COLORS);
            const strokeWidth = rnd(1.8, 2.8);

            const div = document.createElement('div');
            div.className = 'doodle';
            div.style.top = `${y}px`;
            div.style.left = `-200px`;

            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', String(routeWidth));
            svg.setAttribute('height', String(routeHeight));
            svg.setAttribute('viewBox', `0 0 ${routeWidth} ${routeHeight}`);

            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', makeRoutePath(routeWidth, routeHeight));
            path.setAttribute('stroke', stroke);
            path.setAttribute('stroke-width', strokeWidth.toFixed(2));
            svg.appendChild(path);
            div.appendChild(svg);

            // prepare line drawing with duration scaled to length
            requestAnimationFrame(() => {
                const length = path.getTotalLength();
                path.style.strokeDasharray = String(length);
                path.style.strokeDashoffset = String(length);
                path.style.animationDuration = `${Math.min(6.5, Math.max(2.4, length/450))}s`;
            });

            return div;
        }

        // Generate many route doodles down the page
        function generateDoodles(){
            const root = document.getElementById('doodles-root');
            const content = document.querySelector('.content');
            if(!root || !content) return;

            // estimate page height based on content scroll height
            const total = Math.max(document.body.scrollHeight, content.scrollHeight);
            const spacing = 300; // closer spacing for more visibility
            for(let y = 100; y < total + 800; y += spacing){
                // 1-2 routes per band
                const count = 1 + Math.floor(Math.random() * 2);
                for(let i = 0; i < count; i++){
                    const jitterY = y + rnd(-80,80);
                    const node = createRoute(jitterY);
                    root.appendChild(node);
                }
            }
        }

        function onScrollReveal(){
            const winH = window.innerHeight;
            document.querySelectorAll('.doodle').forEach(el => {
                if (el.classList.contains('animate')) return;
                const rect = el.getBoundingClientRect();
                if (rect.top < winH * 0.85 && rect.bottom > 0){
                    setTimeout(() => el.classList.add('animate'), Math.random()*900);
                }
            });
        }

        window.addEventListener('load', () => {
            // Test trails immediately on page load
            setTimeout(() => {
                triggerNameTrails();
            }, 1000);
            
            typeMessage();
            generateDoodles();
            onScrollReveal();
        });
        window.addEventListener('scroll', onScrollReveal, {passive:true});
        window.addEventListener('resize', onScrollReveal);
    </script>
</body>
</html>
